1. Implementation
The current implementation is divided into three functions: main, naives_operation, and simd_operation.

The "main" function starts by generating random floating values between 0.0 and 100.0 for pairs of width and height. Then, it calls the "naives_operation" function and "simd_operation" function and passes in the generated pairs of width and height into each function respectively. For each function call, the execution time and the return value are being recorded. The calling and recording process is then repeated a certain number of iteration and the final results will be averaged over all iterations. 

The "naives_operation" function calculates the sum of all areas given pairs of width and height in two steps. To start with, the function will iterate over all value pairs of width and height, calculate given areas, and store them in an array. Then, the function will iterate over the array of areas and sum it up.  

The "simd_operation" function also calculates the sum of all areas given pairs of width and height in two steps. In the first steps,  widths and heights are partially loaded into two 256 bit registers. Then, the two registers get multiplied together and the result will get accumulated into a new partial area sum registers. For the second steps, values, stored in the partial area sum register, get added together by adding horizontal pairs twice and sum the lower bits with the higher bits of the resulting
256-bit register. The total sum will be located in the first 32 bits of the final 128-bit register. 

2. Compilation Steps
g++ -march=native -o area .\area.cpp
.\area

3. Speedup
Given 10000000 pairs of width and height and repeat operation 1000 times, the speedup is approximately 5 X.  